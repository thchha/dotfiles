
HEADER = require 'header'
LOG = require 'logger'
STATS = require 'statistic'

HTDOCS = "/mnt/server_static_data/blog.hage.gq/htdocs/"
POSTS = "/mnt/server_static_data/blog.hage.gq/posts/"

function READ_FILE(path)
  local f = io.open(path, "r")
  local c = f:read("*a")
  f:close()
  return c
end

local endpoints = {
	["/invalid"] = require 'endpoint.invalid';
  ["GET"] = {
    ["/"] = require 'endpoint.index';
    ["/post"] = require 'endpoint.post.posts';
  };
}

local function init(t)
  for k, v in pairs(t) do
    if type(v) == "table" then init(v)
    elseif type(v) == "thread" then
      print("preload coroutine for handler:", k)
      coroutine.resume(v)
    end
  end
end

init(endpoints)

local server = require 'server'.listen("47011")
local success, req, res
repeat
	success, req = coroutine.resume( server, res )
	if success then
    local head = req["path"]
    local method = string.match(head, "(%a+)%s")
    local path = string.match(head, "%s(.+)%s")
    path = path or string.match(head, "%s(.+)%s?")
    STATS.incrementAt(path)
		local handler = endpoints[method][path]
    if type(handler) ~= "thread" then handler = endpoints["/invalid"] end
    success, res = coroutine.resume( handler, req )
  end

  if not success then
    print("err-req:", req)
    print("err-res:", res)
    coroutine.resume( server, "close socket" )
  end
until false

