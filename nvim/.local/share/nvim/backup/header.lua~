
local M = { }

function M.withStatusCode(nr)
	local codes = {
		[100] = 'Continue',
		[101] = 'Switching Protocols',
		[200] = 'OK',
		[201] = 'Created',
		[202] = 'Accepted',
		[203] = 'Non-Authoritative Information',
		[204] = 'No Content',
		[205] = 'Reset Content',
		[206] = 'Partial Content',
		[300] = 'Multiple Choices',
		[301] = 'Moved Permanently',
		[302] = 'Found',
		[303] = 'See Other',
		[304] = 'Not Modified',
		[305] = 'Use Proxy',
		[307] = 'Temporary Redirect',
		[400] = 'Bad Request',
		[401] = 'Unauthorized',
		[402] = 'Payment Required',
		[403] = 'Forbidden',
		[404] = 'Not Found',
		[405] = 'Method Not Allowed',
		[406] = 'Not Acceptable',
		[407] = 'Proxy Authentication Required',
		[408] = 'Request Time-out',
		[409] = 'Conflict',
		[410] = 'Gone',
		[411] = 'Length Required',
		[412] = 'Precondition Failed',
		[413] = 'Request Entity Too Large',
		[414] = 'Request-URI Too Large',
		[415] = 'Unsupported Media Type',
		[416] = 'Requested range not satisfiable',
		[417] = 'Expectation Failed',
		[500] = 'Internal Server Error',
		[501] = 'Not Implemented',
		[502] = 'Bad Gateway',
		[503] = 'Service Unavailable',
		[504] = 'Gateway Time-out',
		[505] = 'HTTP Version not supported',
	}
	return string.format("HTTP/1.1 %d %s\r\n", nr, codes[nr])
end

function M.from(input)
	local header = ""
	header = header .. M.withStatusCode(input.code or 200)
	header = header .. string.format("Host: %s\r\n" ,input.host or "www.hage.gq")
	header = header .. string.format("Content-Type: %s\r\n", input.content_type or "text/html")
	header = header .. string.format("Accept-Range: %s\r\n", input.type or "bytes")
	-- ETag: is not supported yet on server side.
	header = header .. string.format("Last-Modified: %s\r\n", input.last_modified or os.date())
	header = header .. string.format("Date: %s\r\n", input.date or os.date())
	header = header .. string.format("Content-Length: %s\r\n", string.len(input.content or ""))
	header = header .. string.format("Server: %s\r\n", input.server or "Hage's Lua Box/v0.1")
	return string.format("%s\r\n\r\n%s\r\n", header, input.content or "")
end

return M
